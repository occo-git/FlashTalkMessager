@using Application.Dto
@using Client.Web.Blazor.Services.Contracts
@inject IApiClientService ApiClientService

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table>
        <tr>
            <td>
                Login:
            </td>
            <td>
                <InputText @bind-Value="registerModel.Username" />
            </td>
        </tr>
        <tr>
            <td>
                Email:
            </td>
            <td>
                <InputText @bind-Value="registerModel.Email" type="email" />
            </td>
        </tr>
        <tr>
            <td>
                Password:
            </td>
            <td>
                <InputText @bind-Value="registerModel.Password" type="password" />
            </td>
        </tr>
        <tr>
            <td>
                Confirm:
            </td>
            <td>
                <InputText @bind-Value="registerModel.ConfirmPassword" type="password" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">&#10003;&nbsp;Submit</button>
                <button type="button" class="btn" @onclick="CancelRegister" disabled="@(cts == null)">&times;&nbsp;Cancel</button>
            </td>
        </tr>
    </table>
    @if (apiResult != null)
    {
        @if (apiResult.Success)
        {
            <div class="success">@apiResult.Message</div>
        }
        else 
        { 
            <div class="error">@apiResult.ErrorMessage</div> 
        }
    }

    <div class="separator" />
    <p>
        Have an account?
        <br />
        <button class="btn" @onclick="GoToLogin">→ Log in</button>
    </p>
</EditForm>

@code {
    [Parameter] public EventCallback OnRegisterSuccess { get; set; }
    [Parameter] public EventCallback OnGoToLogin { get; set; }

    private class RegisterModel
    {
        public string Username { get; set; } = String.Empty;
        public string Email { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;
        public string ConfirmPassword { get; set; } = String.Empty;

        public void Clear()
        {
            Username = String.Empty;
            Email = String.Empty;
            Password = String.Empty;
            ConfirmPassword = String.Empty;
        }
    }
    private RegisterModel registerModel = new RegisterModel();
    private ApiResultDto? apiResult = null;
    private CancellationTokenSource? cts = null;
    private bool isSubmitting = false;

    private async Task HandleRegister()
    {
        apiResult = null;
        if (string.IsNullOrWhiteSpace(registerModel.Username) || string.IsNullOrWhiteSpace(registerModel.Email)
            || string.IsNullOrWhiteSpace(registerModel.Password) || string.IsNullOrWhiteSpace(registerModel.ConfirmPassword))
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "All fields required." };
            return;
        }
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Passwords don't match." };
            return;
        }

        isSubmitting = true;
        cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            await HttpRegister(cts.Token);
        }
        finally
        {
            isSubmitting = false;
            if (cts != null)
            {
                cts.Dispose();
                cts = null;
            }
        }
    }

    private async Task HttpRegister(CancellationToken ct)
    {
        var newUser = new CreateUserDto
        {
            Username = registerModel.Username,
            Email = registerModel.Email,
            Password = registerModel.Password
        };

        try
        {
            apiResult = await ApiClientService.RegisterAsync(newUser, ct);
            if (apiResult.Success)
            {
                registerModel.Clear();
                await OnRegisterSuccess.InvokeAsync();
            }
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"Error occured: {ex.Message}" };
        }
    }


    private void CancelRegister()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }

    private void GoToLogin() => OnGoToLogin.InvokeAsync();

    public void Dispose()
    {
        CancelRegister();
    }
}