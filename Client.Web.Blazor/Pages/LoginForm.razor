@using Application.Dto 
@using Client.Web.Blazor.Services.Contracts
@inject IApiClientService ApiClientService

<EditForm Model="loginModel" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
        
    <table>
        <tr>
            <td>
                Login:
            </td>
            <td>
                <InputText @bind-Value="loginModel.Username" />
            </td>
        </tr>
        <tr>
            <td>
                Password:
            </td>
            <td>
                <InputText @bind-Value="loginModel.Password" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <br/>
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">&#10003;&nbsp;Submit</button>
                <button type="button" class="btn" @onclick="CancelLogin" disabled="@(cts == null)">&times;&nbsp;Cancel</button>
            </td>
        </tr>
    </table>
    @if (apiResult != null)
    {
        @if (apiResult.Success)
        {
            <div class="success">@apiResult.Message</div>
        }
        else
        {
            <div class="error">@apiResult.ErrorMessage</div>
        }
    }

    <div class="separator" />
    <p>
        No account? 
        <br />
        <button class="btn" @onclick="GoToRegister">→ Register</button>
    </p>
</EditForm>

@code {
    [Parameter] public EventCallback OnLoginSuccess { get; set; }
    [Parameter] public EventCallback OnGoToRegister { get; set; }

    private class LoginModel
    {
        public string Username { get; set; } = String.Empty;
        public string Password { get; set; } = String.Empty;

        public void Clear()
        {
            Username = String.Empty;
            Password = String.Empty;
        }
    }
    private LoginModel loginModel = new LoginModel();
    private ApiResultDto? apiResult = null;
    private CancellationTokenSource? cts = null;
    private bool isSubmitting = false;

    private async Task HandleLogin()
    {       
        apiResult = null;
        if (string.IsNullOrWhiteSpace(loginModel.Username) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "All fields required." };
            return;
        }

        isSubmitting = true;
        cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            await HttpLogin(cts.Token);
        }
        finally
        {
            isSubmitting = false;
            if (cts != null)
            {
                cts.Dispose();
                cts = null;
            }
        }
    }

    private async Task HttpLogin(CancellationToken ct)
    {
        var loginUser = new LoginUserDto
        {
            Username = loginModel.Username,
            Password = loginModel.Password
        };

        try
        {
            apiResult = await ApiClientService.LoginAsync(loginUser, ct);
            if (apiResult.Success)
            {
                loginModel.Clear();
                await OnLoginSuccess.InvokeAsync();
            }
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"Error occured: {ex.Message}" };
        }
    }

    private void CancelLogin()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }

    private void GoToRegister() => OnGoToRegister.InvokeAsync();

    public void Dispose()
    {
        CancelLogin();
    }
}