@using Application.Dto
@using Client.Web.Blazor.Services.Contracts
@inject IApiClientService ApiClientService

<div>
    <p>Do you realy want to log out?</p>
    <button type="submit" class="btn" @onclick="HandleLogout" disabled="@isSubmitting">&#10003;&nbsp;Log out</button>
    @if (apiResult != null)
    {
        @if (apiResult.Success)
        {
            <div class="success">@apiResult.Message</div>
        }
        else
        {
            <div class="error">@apiResult.ErrorMessage</div>
        }
    }
</div>

@code {
    [Parameter] public EventCallback OnLogoutSuccess { get; set; }

    private ApiResultDto? apiResult = null;
    private CancellationTokenSource? cts = null;
    private bool isSubmitting = false;

    private async Task HandleLogout()
    {
        apiResult = null;

        isSubmitting = true;
        cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            await HttpLogout(cts.Token);
        }
        finally
        {
            isSubmitting = false;
            if (cts != null)
            {
                cts.Dispose();
                cts = null;
            }
        }
    }

    private async Task HttpLogout(CancellationToken ct)
    {
        try
        {
            apiResult = await ApiClientService.LogoutAsync(ct);
            if (apiResult.Success)
            {
                await OnLogoutSuccess.InvokeAsync();
            }
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"Error occured: {ex.Message}" };
        }
    }

    private void CancelLogout()
    {
        if (cts != null)
        {
            cts.Cancel();
            cts.Dispose();
            cts = null;
        }
    }

    public void Dispose()
    {
        CancelLogout();
    }
}
