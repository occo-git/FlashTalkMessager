@using Application.Dto
@using Client.Web.Blazor.Services.Contracts
@inject IApiClientService ApiClientService

<div>

    @if (userInfoDto != null)
    {
        <table>
            <tr>
                <td>
                    Username:
                </td>
                <td>
                    <div>@userInfoDto.Username</div>
                </td>
            </tr>
            <tr>
                <td>
                    Email:
                </td>
                <td>
                    <div>@userInfoDto.Email</div>
                </td>
            </tr>
            <tr>
                <td>
                    Token:
                </td>
                <td>
                    <div class="small-text">@shortToken</div>
                </td>
            </tr>
        </table>
        @if (apiResult != null)
        {
            @if (!apiResult.Success)
            {
                <div class="error">@apiResult.ErrorMessage</div>
            }
        }
    }
    else
    {
        <div class="separator" />
        <p>
            Have an account?
            <br />
            <button class="btn" @onclick="GoToLogin">→ Log in</button>
        </p>
        <p>
            No account?
            <br />
            <button class="btn" @onclick="GoToRegister">→ Register</button>
        </p>
    }

</div>

@code {
    [Parameter] public EventCallback OnGoToLogin { get; set; }
    [Parameter] public EventCallback OnGoToRegister { get; set; }

    private UserInfoDto? userInfoDto = null;
    private string? shortToken = null;
    private void SetUserInfoDto(UserInfoDto? dto)
    {
        userInfoDto = dto;
        if (userInfoDto != null)
            apiResult = new ApiResultDto { Success = true };
        else
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "User info not available." };

        var accessToken = userInfoDto?.AccessToken;
        var len = accessToken?.Length ?? 0;
        shortToken = $"{accessToken?.Substring(0, 4)}...{accessToken?.Substring(len - 4)}";
    }

    private ApiResultDto? apiResult = null;
    private CancellationTokenSource? cts = null;

    protected override async Task OnInitializedAsync()
    {
        await GetProfileInfo();
    }

    private async Task GetProfileInfo()
    {
        SetUserInfoDto(null);

        cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            await HttpProfileInfo(cts.Token);
        }
        finally
        {
            if (cts != null)
            {
                cts.Dispose();
                cts = null;
            }
        }
    }

    private async Task HttpProfileInfo(CancellationToken ct)
    {
        try
        {
            SetUserInfoDto(await ApiClientService.GetCurrentUserInfoAsync(ct));
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"Error occured: {ex.Message}" };
        }
    }

    private void GoToLogin() => OnGoToLogin.InvokeAsync();

    private void GoToRegister() => OnGoToRegister.InvokeAsync();

    public void Dispose()
    {
        cts?.Cancel();
        cts?.Dispose();
    }
}
