@using Client.Web.Blazor.Shared
@using Client.Web.Blazor.Shared.Chat
@using Client.Web.Blazor.Shared.Icons
@using Client.Web.Blazor.Pages
@using Application.Dto
@using System.Text.Json
@using Client.Web.Blazor.Services.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IApiClientService ApiClientService
@inject NavigationManager NavigationManager
@inject IChatSignalServiceClient ChatService

<div class="messenger-layout">
    <header class="header">
        <button class="menu-btn" @onclick="ToggleSidebar">&#9776;</button>
        <h1>FlashTalk Messenger</h1>
    </header>

    <div class="content">

        <div class="@($"side-frame{(sidebarOpen ? " open" : "")}")">
            <div class="side-frame-header">
                <span><strong>Menu</strong></span>
                <button class="close-btn" @onclick="ToggleSidebar">&times;</button>
            </div>
            <nav class="side-frame-nav">
                @if (isAuthenticated)
                {
                    <a @onclick="() => SelectMenuItemAsync(MenuItem.Profile)">
                        <ProfileIcon />
                        Profile
                    </a>
                    <a @onclick="() => SelectMenuItemAsync(MenuItem.Messages)">
                        <MessageIcon />
                        Chats
                    </a>
                    <a @onclick="() => SelectMenuItemAsync(MenuItem.Settings)">
                        <SettingsIcon />
                        Settings
                    </a>
                    <a @onclick="() => SelectMenuItemAsync(MenuItem.Logout)">
                        <ExitIcon />
                        Log Out
                    </a>
                }
                else
                {
                    <a @onclick="() => SelectMenuItemAsync(MenuItem.Login)">
                        <ProfileIcon />
                        Log In
                    </a>
                }
            </nav>
        </div>

        <!-- backgout overlay -->
        @if (sidebarOpen)
        {
            <div class="overlay" @onclick="ToggleSidebar"></div>
        }

        <aside class="sidebar">
            <h3>@GetSidebarTitle()</h3>
            @if (currentMenu == MenuItem.Messages)
            {
                <ChatList Chats="chats" ChatSelected="SelectChat" />
            }
        </aside>

        <main class="main-content">
            @if (apiResult != null)
                @if (apiResult.Success)
                {
                    <div class="success">@apiResult.Message</div>
                }
                else
                {
                    <div class="error">@apiResult.ErrorMessage</div>
                }
            @RenderBody()
        </main>

    </div>

    <footer class="footer">
        &copy; 2025 FlashTalk
    </footer>
</div>

@code {

    private const string apiClientServiceUrl = "https://flashtalk_api:443/chatHub";
    private ApiResultDto? apiResult = null;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("> MainLayout initialized");
        await IsAuthenticatedAsync();
    }

    #region Api Client Service
    private async Task IsAuthenticatedAsync()
    {
        isAuthenticated = await TryAsync(ApiClientService.IsAuthenticatedAsync);
        if (isAuthenticated)
        {
            apiResult = new ApiResultDto { Success = true, Message = "Authenticated" };
        }
        else
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Not authenticated" };
            await SelectMenuItemAsync(MenuItem.Login);
        }
    }

    private async Task TryUpdateTokensAsync()
    {
        //await IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            //Console.WriteLine("> TryUpdateTokensAsync calling...");
            var dto = await TryAsync<TokenUpdatedResultDto?>(ApiClientService.TryUpdateTokensAsync);
            //Console.WriteLine("> TryUpdateTokensAsync called.");
            if (dto == null)
            {
                Console.WriteLine("> TokenUpdatedResultDto is null.");
                apiResult = new ApiResultDto { Success = false, ErrorMessage = "Failed to update tokens" };
                await SelectMenuItemAsync(MenuItem.Login);
                return;
            }
            if (dto.IsNullOrEmpty)
            {
                Console.WriteLine("> Access token or Refresh token or DeviceId is empty.");
                apiResult = new ApiResultDto { Success = false, ErrorMessage = "Access token or Refresh token or DiviceId is empty" };
                await SelectMenuItemAsync(MenuItem.Login);
                return;
            }
            if (dto.IsUpdated)
            {
                //Console.WriteLine("> Tokens updated successfully.");
                apiResult = new ApiResultDto { Success = true, Message = "Tokens updated" };
                tokenResponseDto = new TokenResponseDto(dto);
                await ChatRestart();
            }
            else
            {
                //Console.WriteLine("> Tokens are still valid.");
                apiResult = new ApiResultDto { Success = true, Message = "Tokens are still valid" };
                tokenResponseDto = new TokenResponseDto(dto);
                await ChatStartAsync();
            }
            //Console.WriteLine("> TryUpdateTokensAsync finished.");
        }
    }
    #endregion

    #region Chat Signal Service
    private TokenResponseDto? tokenResponseDto = null;
    private async Task ChatStartAsync()
    {
        if (tokenResponseDto == null)
        {
            Console.WriteLine("> Token response is null.");
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Token response is null. Please log in." };
            await SelectMenuItemAsync(MenuItem.Login);
            return;
        }
        if (ChatService.IsConnected)
        {
            Console.WriteLine("> ChatService is already connected.");
            return;
        }
        else
        {
            Console.WriteLine("> Starting ChatService...");
            await TryAsync(ct => ChatService.StartAsync(apiClientServiceUrl, tokenResponseDto.AccessToken, ct));
            ChatService.OnMessageReceivedAsync += OnChatMessageReceived;
            Console.WriteLine("> ChatService started.");
        }
    }
    private async Task ChatStopAsync()
    {
        //Console.WriteLine("> Stopping ChatService...");
        ChatService.OnMessageReceivedAsync -= OnChatMessageReceived;
        await ChatService.StopAsync();
        //Console.WriteLine("> ChatService stopped.");
    }
    private async Task ChatRestart()
    {
        await ChatStopAsync();
        await ChatStartAsync();
    }
    private async Task OnChatSendMessage(SendMessageRequestDto message)
    {
        await TryUpdateTokensAsync();
        await TryAsync(ct => ChatService.SendMessageAsync(message, ct));
    }
    private async Task OnChatMessageReceived(GetMessageDto message)
    {
        //Console.WriteLine($"MainLayout.ChatService.OnMessageReceivedAsync: {message.Content}");
        await TryAsync(ct => chatMessages.Refresh(ct));
    }
    #endregion

    #region Chats
    private List<ChatInfoDto>? chats;
    private ChatMessages chatMessages = null!;

    private async Task LoadChatsAsync()
    {
        chats = await TryAsync(ApiClientService.GetOrCreateChatsAsync);
    }

    private async Task SelectChat(ChatInfoDto chat)
    {
        if (chatMessages != null)
            await TryAsync(ct => chatMessages.SetChat(chat, ct));
    }
    #endregion

    #region Sidebar
    private bool sidebarOpen = false;

    void ToggleSidebar() => sidebarOpen = !sidebarOpen;

    string GetSidebarTitle()
    {
        return currentMenu switch
        {
            MenuItem.Login => "Log In",
            MenuItem.Register => "Registration",
            MenuItem.Messages => "Chats",
            MenuItem.Profile => "Profile",
            MenuItem.Settings => "Settings",
            MenuItem.Logout => "Log Out",
            _ => ""
        };
    }
    #endregion

    #region Menu Items
    private enum MenuItem
    {
        Welcome,
        Profile,
        Login,
        Register,
        Messages,
        Settings,
        Logout
    }
    private MenuItem currentMenu = MenuItem.Welcome;

    private async Task SelectMenuItemAsync(MenuItem menu)
    {
        //Console.WriteLine($"> Selected menu item: {menu}");
        currentMenu = menu;
        sidebarOpen = false;
        if (menu == MenuItem.Messages)
            await LoadChatsAsync();
        else
            await SelectChat(null!);
    }
    #endregion

    #region Body Render
    RenderFragment RenderBody() => currentMenu switch
    {
        MenuItem.Profile => @<UserProfile OnGoToLogin="OnGoToLogin" OnGoToRegister="OnGoToRegister" />,
        MenuItem.Login => @<LoginForm OnLoginSuccess="OnLoginSuccess" OnGoToRegister="OnGoToRegister" />,
        MenuItem.Register => @<RegisterForm OnRegisterSuccess="OnRegisterSuccess" OnGoToLogin="OnGoToLogin" />,
        MenuItem.Messages => @<ChatMessages @ref="chatMessages" OnSendMessage="OnChatSendMessage" />,
        MenuItem.Settings => @<Settings />,
        MenuItem.Logout => @<LogoutForm OnLogoutSuccess="OnLogoutSuccess" />,
        _ => @<Welcome />
    };
    #endregion

    async Task OnLoginSuccess(TokenResponseDto tokenResponseDto)
    {
        this.tokenResponseDto = tokenResponseDto;
        await IsAuthenticatedAsync();
        await Task.Delay(1000);
        await SelectMenuItemAsync(MenuItem.Profile);
    }

    async Task OnGoToRegister()
    {
        await SelectMenuItemAsync(MenuItem.Register);
    }

    async Task OnRegisterSuccess()
    {
        await Task.Delay(1000);
        await SelectMenuItemAsync(MenuItem.Login);
    }

    async Task OnGoToLogin()
    {
        await SelectMenuItemAsync(MenuItem.Login);
    }

    async Task OnLogoutSuccess()
    {
        await IsAuthenticatedAsync();
        await ChatStopAsync();
        await Task.Delay(1000);
        await SelectMenuItemAsync(MenuItem.Login);
    }

    // async Task OnSendMessage(SendMessageDto message)
    // {
    //     await TryUpdateTokensAsync();
    //     if (selectedChat != null)
    //     {
    //         selectedChat = await TryAsync(ct => ApiClientService.SendMessageAsync(message, ct));
    //         await GetMessagesAsync();
    //     }
    // }


    private async Task<T> TryAsync<T>(Func<CancellationToken, Task<T>> action)
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            return await action(cts.Token);
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
            return default!;
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"{ex.Message}" };
            Console.WriteLine($"Error: {ex.Message}, {ex.StackTrace}");
            return default!;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await ChatStopAsync();
        await ChatService.DisposeAsync();

    }
}
