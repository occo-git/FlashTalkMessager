@using Client.Web.Blazor.Shared
@using Client.Web.Blazor.Shared.Chat
@using Client.Web.Blazor.Shared.Icons
@using Client.Web.Blazor.Pages
@using Application.Dto
@using System.Text.Json
@using Client.Web.Blazor.Services.Contracts
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IApiClientService ApiClientService

<div class="messenger-layout">
    <header class="header">
        <button class="menu-btn" @onclick="ToggleSidebar">&#9776;</button>
        <h1>FlashTalk Messenger</h1>
    </header>

    <div class="content">

        <div class="@($"side-frame{(sidebarOpen ? " open" : "")}")">
            <div class="side-frame-header">
                <span><strong>Menu</strong></span>
                <button class="close-btn" @onclick="ToggleSidebar">&times;</button>
            </div>
            <nav class="side-frame-nav">
                @if (isAuthenticated)
                {
                    <a @onclick="() => SelectMenuItem(MenuItem.Profile)">
                        <ProfileIcon />
                        Profile
                    </a>
                    <a @onclick="() => SelectMenuItem(MenuItem.Messages)">
                        <MessageIcon />
                        Chats
                    </a>
                    <a @onclick="() => SelectMenuItem(MenuItem.Settings)">
                        <SettingsIcon />
                        Settings
                    </a>
                    <a @onclick="() => SelectMenuItem(MenuItem.Logout)">
                        <ExitIcon />
                        Log Out
                    </a>
                }
                else
                {
                    <a @onclick="() => SelectMenuItem(MenuItem.Login)">
                        <ProfileIcon />
                        Log In
                    </a>
                }
            </nav>
        </div>

        <!-- backgout overlay -->
        @if (sidebarOpen)
        {
            <div class="overlay" @onclick="ToggleSidebar"></div>
        }

        <aside class="sidebar">
            <h3>@GetSidebarTitle()</h3>
            @if (currentMenu == MenuItem.Messages)
            {
                <ChatList Chats="chats" ChatSelected="SelectChat" />
            }
        </aside>

        <main class="main-content">
            @if (apiResult != null)
                @if (apiResult.Success)
                {
                    <div class="success">@apiResult.Message</div>
                }
                else
                {
                    <div class="error">@apiResult.ErrorMessage</div>
                }
            @RenderBody()
        </main>

    </div>

    <footer class="footer">
        &copy; 2025 FlashTalk
    </footer>
</div>

@code {

    private ApiResultDto? apiResult = null;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await TryUpdateTokensAsync();
        await IsAuthenticatedAsync();
    }

    #region Api Client Service
    private async Task IsAuthenticatedAsync()
    {
        isAuthenticated = await TryAsync(ApiClientService.IsAuthenticatedAsync);
        if (isAuthenticated)
        {
            apiResult = new ApiResultDto { Success = true, Message = "Authenticated" };
        }
        else
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Not authenticated" };
            currentMenu = MenuItem.Login;
        }
    }

    private async Task TryUpdateTokensAsync()
    {
        if (isAuthenticated)
        {
            var isTokenUpdated = await TryAsync(ApiClientService.TryUpdateTokensAsync);
            if (isTokenUpdated)
            {
                apiResult = new ApiResultDto { Success = true, Message = "Tokens updated" };
                //await IsAuthenticated();
            }
        }
    }

    private async Task<T> TryAsync<T>(Func<CancellationToken, Task<T>> action)
    {
        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
        try
        {
            return await action(cts.Token);
        }
        catch (OperationCanceledException)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = "Request canceled." };
            return default!;
        }
        catch (Exception ex)
        {
            apiResult = new ApiResultDto { Success = false, ErrorMessage = $"Error occured: {ex.Message}" };
            return default!;
        }
    }
    #endregion

    #region Chats
    private List<ChatInfoDto>? chats;
    private ChatInfoDto? selectedChat;
    private List<GetMessageDto>? messages;

    private async Task LoadChatsAsync()
    {
        chats = await TryAsync(ApiClientService.GetOrCreateChatsAsync);
    }

    private async Task SelectChat(ChatInfoDto chat)
    {
        selectedChat = chat;
        await GetMessagesAsync();

    }
    private async Task GetMessagesAsync()
    {
        if (selectedChat != null)
            messages = await TryAsync(ct => ApiClientService.GetMessagesByChatIdAsync(selectedChat.Id, ct));
        else
            messages = null;
    }
    #endregion

    #region Sidebar
    private bool sidebarOpen = false;

    void ToggleSidebar() => sidebarOpen = !sidebarOpen;

    string GetSidebarTitle()
    {
        return currentMenu switch
        {
            MenuItem.Login => "Log In",
            MenuItem.Register => "Registration",
            MenuItem.Messages => "Chats",
            MenuItem.Profile => "Profile",
            MenuItem.Settings => "Settings",
            MenuItem.Logout => "Log Out",
            _ => ""
        };
    }
    #endregion

    #region Menu Items
    private enum MenuItem
    {
        Welcome,
        Profile,
        Login,
        Register,
        Messages,
        Settings,
        Logout
    }
    private MenuItem currentMenu = MenuItem.Profile;

    private async Task SelectMenuItem(MenuItem menu)
    {
        await TryUpdateTokensAsync();
        currentMenu = menu;
        sidebarOpen = false;
        if (menu == MenuItem.Messages)
        {
            await LoadChatsAsync();
        }
        else
        {
            selectedChat = null;
        }
    }
    #endregion

    #region Body Render
    RenderFragment RenderBody() => currentMenu switch
    {
        MenuItem.Profile => @<UserProfile OnGoToLogin="OnGoToLogin" OnGoToRegister="OnGoToRegister" />,
        MenuItem.Login => @<LoginForm OnLoginSuccess="OnLoginSuccess" OnGoToRegister="OnGoToRegister" />,
        MenuItem.Register => @<RegisterForm OnRegisterSuccess="OnRegisterSuccess" OnGoToLogin="OnGoToLogin" />,
        MenuItem.Messages => selectedChat is null ? @<SelectChat /> : @<ChatMessages SelectedChat="@selectedChat" Messages="@messages" OnSendMessage="OnSendMessage" />,
        MenuItem.Settings => @<Settings />,
        MenuItem.Logout => @<LogoutForm OnLogoutSuccess="OnLogoutSuccess" />,
        _ => @<Welcome />
    };
    #endregion

    async Task OnLoginSuccess()
    {
        await IsAuthenticatedAsync();
        await Task.Delay(1000);
        currentMenu = MenuItem.Profile;
    }

    void OnGoToRegister()
    {
        currentMenu = MenuItem.Register;
    }

    async Task OnRegisterSuccess()
    {
        await Task.Delay(1000);
        currentMenu = MenuItem.Login;
    }

    void OnGoToLogin()
    {
        currentMenu = MenuItem.Login;
    }

    async Task OnLogoutSuccess()
    {
        await IsAuthenticatedAsync();
        await Task.Delay(1000);
        currentMenu = MenuItem.Login;
    }

    async Task OnSendMessage(SendMessageDto message)
    {
        if (selectedChat != null)
        {
            selectedChat = await TryAsync(ct => ApiClientService.SendMessageAsync(message, ct));
            await GetMessagesAsync();
        }
    }

    public void Dispose()
    {

    }
}
