@using Application.Dto
@using Client.Web.Blazor.Shared
@using Client.Web.Blazor.Services.Contracts
@inject IJSRuntime JSRuntime
@inject IApiClientService ApiClientService

<div class="chat-container">
    @if (selectedChat == null)
    {
        <div class ="chat-title">← Select a chat</div>
    }
    else
    {
        <div class="chat-title">@selectedChat.Name</div>
    }
    <div class="messages-area" @ref="messagesDivRef">
        @if (chatMessages == null || chatMessages.Count == 0)
        {
            <div class="no-messages">No messages</div>
        }
        else
        {
            @foreach (var msg in chatMessages)
            {
                <ChatMessage Text="@msg.Content" IsMine="@msg.IsMine" />
            }
        }
    </div>

    @if (selectedChat != null)
    {
        <div class="input-area">
            <input @bind="newMessageContent" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="Enter your message..." />
            @* <button class="btn btn-send" @onclick="SendMessage" disabled="!@isNewMessage">&#10548;</button> *@
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<ChatSendMessagetDto> OnChatSendMessage { get; set; }

    private ChatInfoDto? selectedChat = null;
    private List<GetMessageDto>? chatMessages = null;
    private string newMessageContent = string.Empty;
    private bool isNewMessage { get => !string.IsNullOrWhiteSpace(newMessageContent); }
    private ElementReference messagesDivRef;

    public async Task<bool> SetChat(ChatInfoDto? chat, CancellationToken ct)
    {
        selectedChat = chat;
        if (selectedChat != null)
        {
            var dto = new GetMessagesRequestDto
            {
                ChatId = selectedChat.Id,
                PageNumber = 1,
                PageSize = 20,
            };
            var messages = await ApiClientService.GetMessagesAsync(dto, ct);
            chatMessages = messages;
            await OnMessagesChanged();
            return true;
        }
        else
        {
            chatMessages = null;
            await OnMessagesChanged();
            return false;
        }
    }
    public async Task<bool> Refresh(CancellationToken ct)
    {
        return await SetChat(selectedChat, ct);
    }
    private async Task OnMessagesChanged()
    {
        await Task.Delay(500);
        newMessageContent = string.Empty;
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();
    }

    // Send message on Enter key press
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (selectedChat != null && isNewMessage)
        {
            if (OnChatSendMessage.HasDelegate)
            {
                var message = new ChatSendMessagetDto
                {
                    ChatId = selectedChat.Id,
                    ChatIsNew = selectedChat.IsNew,
                    ChatName = selectedChat.Name,
                    ReceiverId = selectedChat.ReceiverId,
                    Content = newMessageContent
                };
                await OnChatSendMessage.InvokeAsync(message);
            }
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToEnd", messagesDivRef);
    }
}